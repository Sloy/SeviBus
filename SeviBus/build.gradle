buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.github.triplet.gradle:play-publisher:1.2.2'
  }
}

repositories {
  maven { url 'https://maven.fabric.io/public' }
  maven { url 'https://raw.github.com/ichigotake/ColorPicker/migrate-to-gradle/repository' }
  mavenCentral()
}
apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'

def myVersionCode = 95
def myVersionName = "3.8.0"

android {
  signingConfigs {
    release {
      storeFile file("../sevibus.keystore")
    }
    debug {
      storeFile file("../debug.keystore")
    }
  }
  compileSdkVersion 29
  defaultConfig {
    applicationId 'com.sloy.sevibus'
    minSdkVersion 21
    targetSdkVersion 29
    versionCode myVersionCode
    versionName myVersionName
    multiDexEnabled true
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildTypes {
    debug {
      applicationIdSuffix ".debug"
      versionNameSuffix ".debug"
    }

    release {
      minifyEnabled false
      signingConfig = signingConfigs.release
    }
  }

  flavorDimensions "city"
  productFlavors {
    sevilla {
      dimension "city"
    }
    barna {
      dimension "city"
    }
  }
  packagingOptions {
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/LICENSE-FIREBASE.txt'
    exclude 'META-INF/NOTICE'
  }
  lintOptions {
    abortOnError false
  }
}

dependencies {
  def supportVersion = '27.1.1'
  implementation "com.android.support:appcompat-v7:$supportVersion"
  implementation "com.android.support:design:$supportVersion"
}

play {
  jsonFile = file('gplay-secret.json')
  track = 'alpha'
  //    userFraction = 0.005
}

def (releaseKeystorePassword, releaseKeyAlias, releaseKeyPassword) = signingConfigFromFile()
if (releaseKeystorePassword != null && releaseKeyAlias != null && releaseKeyPassword != null) {
  android.signingConfigs.release.storePassword = releaseKeystorePassword
  android.signingConfigs.release.keyAlias = releaseKeyAlias
  android.signingConfigs.release.keyPassword = releaseKeyPassword
} else {
  println "No se han encontrado las credenciales necesarias para poder firmar el apk"
  android.buildTypes.release.signingConfig = null
}

def signingConfigFromFile() {
  println '-> signingConfigFromFile'
  def Properties props = new Properties()
  def propFile = file('signing.properties')

  if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

      def keystorePassword = props['STORE_PASSWORD']
      def keyAlias = props['KEY_ALIAS']
      def keyPassword = props['KEY_PASSWORD']

      return [keystorePassword, keyAlias, keyPassword]
    } else {
      println 'signing.properties found but some entries are missing'
    }
  } else {
    println 'signing.properties not found'
  }
  return [null, null, null]
}